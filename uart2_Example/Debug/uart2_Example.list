
uart2_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d48  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000f0c  08000f0c  00010f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f14  08000f14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08000f14  08000f14  00010f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000f1c  08000f1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f1c  08000f1c  00010f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f20  08000f20  00010f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08000f30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000f30  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006425  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e66  00000000  00000000  00026461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000538  00000000  00000000  000272c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f0  00000000  00000000  00027800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f0f7  00000000  00000000  00027cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006172  00000000  00000000  00046de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3c17  00000000  00000000  0004cf59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110b70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014bc  00000000  00000000  00110bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000ef4 	.word	0x08000ef4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08000ef4 	.word	0x08000ef4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:


UART_HandleTypeDef huart2;

int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_Init();
 800050c:	f000 f896 	bl	800063c <HAL_Init>
	SystemClockConfig();
 8000510:	f000 f805 	bl	800051e <SystemClockConfig>
	UART2_Init();
 8000514:	f000 f80a 	bl	800052c <UART2_Init>

	return 0;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	bd80      	pop	{r7, pc}

0800051e <SystemClockConfig>:

void SystemClockConfig(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0

}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <UART2_Init>:


void UART2_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <UART2_Init+0x44>)
 8000532:	4a10      	ldr	r2, [pc, #64]	; (8000574 <UART2_Init+0x48>)
 8000534:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <UART2_Init+0x44>)
 8000538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800053c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <UART2_Init+0x44>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <UART2_Init+0x44>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <UART2_Init+0x44>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <UART2_Init+0x44>)
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <UART2_Init+0x44>)
 8000558:	220c      	movs	r2, #12
 800055a:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <UART2_Init+0x44>)
 800055e:	f000 f9d9 	bl	8000914 <HAL_UART_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <UART2_Init+0x40>
	{
		//There is a problem
		Error_Handler();
 8000568:	f000 f806 	bl	8000578 <Error_Handler>
	};

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000028 	.word	0x20000028
 8000574:	40004400 	.word	0x40004400

08000578 <Error_Handler>:

void Error_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	while(1);
 800057c:	e7fe      	b.n	800057c <Error_Handler+0x4>
	...

08000580 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	//Here will do low level processor specific inits
		//1. Set up the priority grouping of the arm cortex mx processor
		HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000584:	2003      	movs	r0, #3
 8000586:	f000 f95d 	bl	8000844 <HAL_NVIC_SetPriorityGrouping>

		//2. Enable the required system exceptions of the arm cortex mx processor
		SCB->SHCSR |= 0x7 << 16; // usg fault, memory fault and bus fault system exception
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <HAL_MspInit+0x40>)
 800058c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800058e:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <HAL_MspInit+0x40>)
 8000590:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000594:	6253      	str	r3, [r2, #36]	; 0x24


		//3. Configure the priority for the system exceptions
		HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	f06f 000b 	mvn.w	r0, #11
 800059e:	f000 f95c 	bl	800085a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	f06f 000a 	mvn.w	r0, #10
 80005aa:	f000 f956 	bl	800085a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
 80005b2:	f06f 0009 	mvn.w	r0, #9
 80005b6:	f000 f950 	bl	800085a <HAL_NVIC_SetPriority>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <SystemInit+0x20>)
 80005ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ce:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <SystemInit+0x20>)
 80005d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000620 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005ee:	490e      	ldr	r1, [pc, #56]	; (8000628 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000604:	4c0b      	ldr	r4, [pc, #44]	; (8000634 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000612:	f7ff ffd7 	bl	80005c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000616:	f000 fc49 	bl	8000eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800061a:	f7ff ff75 	bl	8000508 <main>
  bx  lr    
 800061e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000620:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800062c:	08000f24 	.word	0x08000f24
  ldr r2, =_sbss
 8000630:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000634:	2000006c 	.word	0x2000006c

08000638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC_IRQHandler>
	...

0800063c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <HAL_Init+0x40>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <HAL_Init+0x40>)
 8000646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800064a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <HAL_Init+0x40>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a0a      	ldr	r2, [pc, #40]	; (800067c <HAL_Init+0x40>)
 8000652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000656:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_Init+0x40>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_Init+0x40>)
 800065e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000664:	2003      	movs	r0, #3
 8000666:	f000 f8ed 	bl	8000844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f808 	bl	8000680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000670:	f7ff ff86 	bl	8000580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023c00 	.word	0x40023c00

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x54>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x58>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	fbb3 f3f1 	udiv	r3, r3, r1
 800069a:	fbb2 f3f3 	udiv	r3, r2, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f8f7 	bl	8000892 <HAL_SYSTICK_Config>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e00e      	b.n	80006cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b0f      	cmp	r3, #15
 80006b2:	d80a      	bhi.n	80006ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b4:	2200      	movs	r2, #0
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	f04f 30ff 	mov.w	r0, #4294967295
 80006bc:	f000 f8cd 	bl	800085a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <HAL_InitTick+0x5c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e000      	b.n	80006cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000008 	.word	0x20000008
 80006dc:	20000004 	.word	0x20000004

080006e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006fc:	4013      	ands	r3, r2
 80006fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000712:	4a04      	ldr	r2, [pc, #16]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	60d3      	str	r3, [r2, #12]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <__NVIC_GetPriorityGrouping+0x18>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	0a1b      	lsrs	r3, r3, #8
 8000732:	f003 0307 	and.w	r3, r3, #7
}
 8000736:	4618      	mov	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	db0a      	blt.n	800076e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	b2da      	uxtb	r2, r3
 800075c:	490c      	ldr	r1, [pc, #48]	; (8000790 <__NVIC_SetPriority+0x4c>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	0112      	lsls	r2, r2, #4
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	440b      	add	r3, r1
 8000768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800076c:	e00a      	b.n	8000784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4908      	ldr	r1, [pc, #32]	; (8000794 <__NVIC_SetPriority+0x50>)
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	f003 030f 	and.w	r3, r3, #15
 800077a:	3b04      	subs	r3, #4
 800077c:	0112      	lsls	r2, r2, #4
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	440b      	add	r3, r1
 8000782:	761a      	strb	r2, [r3, #24]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000e100 	.word	0xe000e100
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000798:	b480      	push	{r7}
 800079a:	b089      	sub	sp, #36	; 0x24
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	f1c3 0307 	rsb	r3, r3, #7
 80007b2:	2b04      	cmp	r3, #4
 80007b4:	bf28      	it	cs
 80007b6:	2304      	movcs	r3, #4
 80007b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3304      	adds	r3, #4
 80007be:	2b06      	cmp	r3, #6
 80007c0:	d902      	bls.n	80007c8 <NVIC_EncodePriority+0x30>
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3b03      	subs	r3, #3
 80007c6:	e000      	b.n	80007ca <NVIC_EncodePriority+0x32>
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007cc:	f04f 32ff 	mov.w	r2, #4294967295
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	43da      	mvns	r2, r3
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	401a      	ands	r2, r3
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e0:	f04f 31ff 	mov.w	r1, #4294967295
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	43d9      	mvns	r1, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	4313      	orrs	r3, r2
         );
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3724      	adds	r7, #36	; 0x24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000810:	d301      	bcc.n	8000816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000812:	2301      	movs	r3, #1
 8000814:	e00f      	b.n	8000836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <SysTick_Config+0x40>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081e:	210f      	movs	r1, #15
 8000820:	f04f 30ff 	mov.w	r0, #4294967295
 8000824:	f7ff ff8e 	bl	8000744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <SysTick_Config+0x40>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <SysTick_Config+0x40>)
 8000830:	2207      	movs	r2, #7
 8000832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	e000e010 	.word	0xe000e010

08000844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ff47 	bl	80006e0 <__NVIC_SetPriorityGrouping>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800086c:	f7ff ff5c 	bl	8000728 <__NVIC_GetPriorityGrouping>
 8000870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	6978      	ldr	r0, [r7, #20]
 8000878:	f7ff ff8e 	bl	8000798 <NVIC_EncodePriority>
 800087c:	4602      	mov	r2, r0
 800087e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff5d 	bl	8000744 <__NVIC_SetPriority>
}
 800088a:	bf00      	nop
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ffb0 	bl	8000800 <SysTick_Config>
 80008a0:	4603      	mov	r3, r0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80008b2:	681b      	ldr	r3, [r3, #0]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000000 	.word	0x20000000

080008c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80008c8:	f7ff fff0 	bl	80008ac <HAL_RCC_GetHCLKFreq>
 80008cc:	4602      	mov	r2, r0
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	0a9b      	lsrs	r3, r3, #10
 80008d4:	f003 0307 	and.w	r3, r3, #7
 80008d8:	4903      	ldr	r1, [pc, #12]	; (80008e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80008da:	5ccb      	ldrb	r3, [r1, r3]
 80008dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	08000f0c 	.word	0x08000f0c

080008ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80008f0:	f7ff ffdc 	bl	80008ac <HAL_RCC_GetHCLKFreq>
 80008f4:	4602      	mov	r2, r0
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_RCC_GetPCLK2Freq+0x20>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	0b5b      	lsrs	r3, r3, #13
 80008fc:	f003 0307 	and.w	r3, r3, #7
 8000900:	4903      	ldr	r1, [pc, #12]	; (8000910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000902:	5ccb      	ldrb	r3, [r1, r3]
 8000904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000908:	4618      	mov	r0, r3
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	08000f0c 	.word	0x08000f0c

08000914 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d101      	bne.n	8000926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e03f      	b.n	80009a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d106      	bne.n	8000940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 f837 	bl	80009ae <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2224      	movs	r2, #36	; 0x24
 8000944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	68da      	ldr	r2, [r3, #12]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000956:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f000 f833 	bl	80009c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	691a      	ldr	r2, [r3, #16]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800096c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	695a      	ldr	r2, [r3, #20]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800097c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800098c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2200      	movs	r2, #0
 8000992:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2220      	movs	r2, #32
 8000998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2220      	movs	r2, #32
 80009a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80009c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009c8:	b0c0      	sub	sp, #256	; 0x100
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80009d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80009dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009e0:	68d9      	ldr	r1, [r3, #12]
 80009e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	ea40 0301 	orr.w	r3, r0, r1
 80009ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80009ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	431a      	orrs	r2, r3
 80009fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	431a      	orrs	r2, r3
 8000a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8000a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8000a1c:	f021 010c 	bic.w	r1, r1, #12
 8000a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000a2a:	430b      	orrs	r3, r1
 8000a2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8000a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a3e:	6999      	ldr	r1, [r3, #24]
 8000a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	ea40 0301 	orr.w	r3, r0, r1
 8000a4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b8f      	ldr	r3, [pc, #572]	; (8000c90 <UART_SetConfig+0x2cc>)
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d005      	beq.n	8000a64 <UART_SetConfig+0xa0>
 8000a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	4b8d      	ldr	r3, [pc, #564]	; (8000c94 <UART_SetConfig+0x2d0>)
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d104      	bne.n	8000a6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000a64:	f7ff ff42 	bl	80008ec <HAL_RCC_GetPCLK2Freq>
 8000a68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8000a6c:	e003      	b.n	8000a76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000a6e:	f7ff ff29 	bl	80008c4 <HAL_RCC_GetPCLK1Freq>
 8000a72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a7a:	69db      	ldr	r3, [r3, #28]
 8000a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a80:	f040 810c 	bne.w	8000c9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000a8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000a92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000a96:	4622      	mov	r2, r4
 8000a98:	462b      	mov	r3, r5
 8000a9a:	1891      	adds	r1, r2, r2
 8000a9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8000a9e:	415b      	adcs	r3, r3
 8000aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000aa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000aa6:	4621      	mov	r1, r4
 8000aa8:	eb12 0801 	adds.w	r8, r2, r1
 8000aac:	4629      	mov	r1, r5
 8000aae:	eb43 0901 	adc.w	r9, r3, r1
 8000ab2:	f04f 0200 	mov.w	r2, #0
 8000ab6:	f04f 0300 	mov.w	r3, #0
 8000aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ac6:	4690      	mov	r8, r2
 8000ac8:	4699      	mov	r9, r3
 8000aca:	4623      	mov	r3, r4
 8000acc:	eb18 0303 	adds.w	r3, r8, r3
 8000ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000ad4:	462b      	mov	r3, r5
 8000ad6:	eb49 0303 	adc.w	r3, r9, r3
 8000ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000aea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000aee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8000af2:	460b      	mov	r3, r1
 8000af4:	18db      	adds	r3, r3, r3
 8000af6:	653b      	str	r3, [r7, #80]	; 0x50
 8000af8:	4613      	mov	r3, r2
 8000afa:	eb42 0303 	adc.w	r3, r2, r3
 8000afe:	657b      	str	r3, [r7, #84]	; 0x54
 8000b00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000b04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8000b08:	f7ff fb7c 	bl	8000204 <__aeabi_uldivmod>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	460b      	mov	r3, r1
 8000b10:	4b61      	ldr	r3, [pc, #388]	; (8000c98 <UART_SetConfig+0x2d4>)
 8000b12:	fba3 2302 	umull	r2, r3, r3, r2
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	011c      	lsls	r4, r3, #4
 8000b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000b24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000b28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8000b2c:	4642      	mov	r2, r8
 8000b2e:	464b      	mov	r3, r9
 8000b30:	1891      	adds	r1, r2, r2
 8000b32:	64b9      	str	r1, [r7, #72]	; 0x48
 8000b34:	415b      	adcs	r3, r3
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000b3c:	4641      	mov	r1, r8
 8000b3e:	eb12 0a01 	adds.w	sl, r2, r1
 8000b42:	4649      	mov	r1, r9
 8000b44:	eb43 0b01 	adc.w	fp, r3, r1
 8000b48:	f04f 0200 	mov.w	r2, #0
 8000b4c:	f04f 0300 	mov.w	r3, #0
 8000b50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000b54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000b5c:	4692      	mov	sl, r2
 8000b5e:	469b      	mov	fp, r3
 8000b60:	4643      	mov	r3, r8
 8000b62:	eb1a 0303 	adds.w	r3, sl, r3
 8000b66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000b6a:	464b      	mov	r3, r9
 8000b6c:	eb4b 0303 	adc.w	r3, fp, r3
 8000b70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000b80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000b84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8000b88:	460b      	mov	r3, r1
 8000b8a:	18db      	adds	r3, r3, r3
 8000b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8000b8e:	4613      	mov	r3, r2
 8000b90:	eb42 0303 	adc.w	r3, r2, r3
 8000b94:	647b      	str	r3, [r7, #68]	; 0x44
 8000b96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000b9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000b9e:	f7ff fb31 	bl	8000204 <__aeabi_uldivmod>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4b3b      	ldr	r3, [pc, #236]	; (8000c98 <UART_SetConfig+0x2d4>)
 8000baa:	fba3 2301 	umull	r2, r3, r3, r1
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2264      	movs	r2, #100	; 0x64
 8000bb2:	fb02 f303 	mul.w	r3, r2, r3
 8000bb6:	1acb      	subs	r3, r1, r3
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000bbe:	4b36      	ldr	r3, [pc, #216]	; (8000c98 <UART_SetConfig+0x2d4>)
 8000bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8000bc4:	095b      	lsrs	r3, r3, #5
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000bcc:	441c      	add	r4, r3
 8000bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000bd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000bdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8000be0:	4642      	mov	r2, r8
 8000be2:	464b      	mov	r3, r9
 8000be4:	1891      	adds	r1, r2, r2
 8000be6:	63b9      	str	r1, [r7, #56]	; 0x38
 8000be8:	415b      	adcs	r3, r3
 8000bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000bf0:	4641      	mov	r1, r8
 8000bf2:	1851      	adds	r1, r2, r1
 8000bf4:	6339      	str	r1, [r7, #48]	; 0x30
 8000bf6:	4649      	mov	r1, r9
 8000bf8:	414b      	adcs	r3, r1
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8000bfc:	f04f 0200 	mov.w	r2, #0
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8000c08:	4659      	mov	r1, fp
 8000c0a:	00cb      	lsls	r3, r1, #3
 8000c0c:	4651      	mov	r1, sl
 8000c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000c12:	4651      	mov	r1, sl
 8000c14:	00ca      	lsls	r2, r1, #3
 8000c16:	4610      	mov	r0, r2
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4642      	mov	r2, r8
 8000c1e:	189b      	adds	r3, r3, r2
 8000c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000c24:	464b      	mov	r3, r9
 8000c26:	460a      	mov	r2, r1
 8000c28:	eb42 0303 	adc.w	r3, r2, r3
 8000c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000c3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8000c44:	460b      	mov	r3, r1
 8000c46:	18db      	adds	r3, r3, r3
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	eb42 0303 	adc.w	r3, r2, r3
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000c56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8000c5a:	f7ff fad3 	bl	8000204 <__aeabi_uldivmod>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	460b      	mov	r3, r1
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <UART_SetConfig+0x2d4>)
 8000c64:	fba3 1302 	umull	r1, r3, r3, r2
 8000c68:	095b      	lsrs	r3, r3, #5
 8000c6a:	2164      	movs	r1, #100	; 0x64
 8000c6c:	fb01 f303 	mul.w	r3, r1, r3
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	3332      	adds	r3, #50	; 0x32
 8000c76:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <UART_SetConfig+0x2d4>)
 8000c78:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7c:	095b      	lsrs	r3, r3, #5
 8000c7e:	f003 0207 	and.w	r2, r3, #7
 8000c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4422      	add	r2, r4
 8000c8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8000c8c:	e105      	b.n	8000e9a <UART_SetConfig+0x4d6>
 8000c8e:	bf00      	nop
 8000c90:	40011000 	.word	0x40011000
 8000c94:	40011400 	.word	0x40011400
 8000c98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000ca6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000caa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000cae:	4642      	mov	r2, r8
 8000cb0:	464b      	mov	r3, r9
 8000cb2:	1891      	adds	r1, r2, r2
 8000cb4:	6239      	str	r1, [r7, #32]
 8000cb6:	415b      	adcs	r3, r3
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000cbe:	4641      	mov	r1, r8
 8000cc0:	1854      	adds	r4, r2, r1
 8000cc2:	4649      	mov	r1, r9
 8000cc4:	eb43 0501 	adc.w	r5, r3, r1
 8000cc8:	f04f 0200 	mov.w	r2, #0
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	00eb      	lsls	r3, r5, #3
 8000cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cd6:	00e2      	lsls	r2, r4, #3
 8000cd8:	4614      	mov	r4, r2
 8000cda:	461d      	mov	r5, r3
 8000cdc:	4643      	mov	r3, r8
 8000cde:	18e3      	adds	r3, r4, r3
 8000ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000ce4:	464b      	mov	r3, r9
 8000ce6:	eb45 0303 	adc.w	r3, r5, r3
 8000cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000cfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000cfe:	f04f 0200 	mov.w	r2, #0
 8000d02:	f04f 0300 	mov.w	r3, #0
 8000d06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	008b      	lsls	r3, r1, #2
 8000d0e:	4621      	mov	r1, r4
 8000d10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d14:	4621      	mov	r1, r4
 8000d16:	008a      	lsls	r2, r1, #2
 8000d18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8000d1c:	f7ff fa72 	bl	8000204 <__aeabi_uldivmod>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
 8000d24:	4b60      	ldr	r3, [pc, #384]	; (8000ea8 <UART_SetConfig+0x4e4>)
 8000d26:	fba3 2302 	umull	r2, r3, r3, r2
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	011c      	lsls	r4, r3, #4
 8000d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000d32:	2200      	movs	r2, #0
 8000d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000d38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000d3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8000d40:	4642      	mov	r2, r8
 8000d42:	464b      	mov	r3, r9
 8000d44:	1891      	adds	r1, r2, r2
 8000d46:	61b9      	str	r1, [r7, #24]
 8000d48:	415b      	adcs	r3, r3
 8000d4a:	61fb      	str	r3, [r7, #28]
 8000d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d50:	4641      	mov	r1, r8
 8000d52:	1851      	adds	r1, r2, r1
 8000d54:	6139      	str	r1, [r7, #16]
 8000d56:	4649      	mov	r1, r9
 8000d58:	414b      	adcs	r3, r1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	f04f 0200 	mov.w	r2, #0
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8000d68:	4659      	mov	r1, fp
 8000d6a:	00cb      	lsls	r3, r1, #3
 8000d6c:	4651      	mov	r1, sl
 8000d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000d72:	4651      	mov	r1, sl
 8000d74:	00ca      	lsls	r2, r1, #3
 8000d76:	4610      	mov	r0, r2
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4642      	mov	r2, r8
 8000d7e:	189b      	adds	r3, r3, r2
 8000d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000d84:	464b      	mov	r3, r9
 8000d86:	460a      	mov	r2, r1
 8000d88:	eb42 0303 	adc.w	r3, r2, r3
 8000d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8000da8:	4649      	mov	r1, r9
 8000daa:	008b      	lsls	r3, r1, #2
 8000dac:	4641      	mov	r1, r8
 8000dae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000db2:	4641      	mov	r1, r8
 8000db4:	008a      	lsls	r2, r1, #2
 8000db6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000dba:	f7ff fa23 	bl	8000204 <__aeabi_uldivmod>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	4b39      	ldr	r3, [pc, #228]	; (8000ea8 <UART_SetConfig+0x4e4>)
 8000dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8000dc8:	095b      	lsrs	r3, r3, #5
 8000dca:	2164      	movs	r1, #100	; 0x64
 8000dcc:	fb01 f303 	mul.w	r3, r1, r3
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	3332      	adds	r3, #50	; 0x32
 8000dd6:	4a34      	ldr	r2, [pc, #208]	; (8000ea8 <UART_SetConfig+0x4e4>)
 8000dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ddc:	095b      	lsrs	r3, r3, #5
 8000dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000de2:	441c      	add	r4, r3
 8000de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000de8:	2200      	movs	r2, #0
 8000dea:	673b      	str	r3, [r7, #112]	; 0x70
 8000dec:	677a      	str	r2, [r7, #116]	; 0x74
 8000dee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8000df2:	4642      	mov	r2, r8
 8000df4:	464b      	mov	r3, r9
 8000df6:	1891      	adds	r1, r2, r2
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	415b      	adcs	r3, r3
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e02:	4641      	mov	r1, r8
 8000e04:	1851      	adds	r1, r2, r1
 8000e06:	6039      	str	r1, [r7, #0]
 8000e08:	4649      	mov	r1, r9
 8000e0a:	414b      	adcs	r3, r1
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	f04f 0200 	mov.w	r2, #0
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8000e1a:	4659      	mov	r1, fp
 8000e1c:	00cb      	lsls	r3, r1, #3
 8000e1e:	4651      	mov	r1, sl
 8000e20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000e24:	4651      	mov	r1, sl
 8000e26:	00ca      	lsls	r2, r1, #3
 8000e28:	4610      	mov	r0, r2
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4642      	mov	r2, r8
 8000e30:	189b      	adds	r3, r3, r2
 8000e32:	66bb      	str	r3, [r7, #104]	; 0x68
 8000e34:	464b      	mov	r3, r9
 8000e36:	460a      	mov	r2, r1
 8000e38:	eb42 0303 	adc.w	r3, r2, r3
 8000e3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	663b      	str	r3, [r7, #96]	; 0x60
 8000e48:	667a      	str	r2, [r7, #100]	; 0x64
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	f04f 0300 	mov.w	r3, #0
 8000e52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8000e56:	4649      	mov	r1, r9
 8000e58:	008b      	lsls	r3, r1, #2
 8000e5a:	4641      	mov	r1, r8
 8000e5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000e60:	4641      	mov	r1, r8
 8000e62:	008a      	lsls	r2, r1, #2
 8000e64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8000e68:	f7ff f9cc 	bl	8000204 <__aeabi_uldivmod>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <UART_SetConfig+0x4e4>)
 8000e72:	fba3 1302 	umull	r1, r3, r3, r2
 8000e76:	095b      	lsrs	r3, r3, #5
 8000e78:	2164      	movs	r1, #100	; 0x64
 8000e7a:	fb01 f303 	mul.w	r3, r1, r3
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	011b      	lsls	r3, r3, #4
 8000e82:	3332      	adds	r3, #50	; 0x32
 8000e84:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <UART_SetConfig+0x4e4>)
 8000e86:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	f003 020f 	and.w	r2, r3, #15
 8000e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4422      	add	r2, r4
 8000e98:	609a      	str	r2, [r3, #8]
}
 8000e9a:	bf00      	nop
 8000e9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000ea6:	bf00      	nop
 8000ea8:	51eb851f 	.word	0x51eb851f

08000eac <__libc_init_array>:
 8000eac:	b570      	push	{r4, r5, r6, lr}
 8000eae:	4d0d      	ldr	r5, [pc, #52]	; (8000ee4 <__libc_init_array+0x38>)
 8000eb0:	4c0d      	ldr	r4, [pc, #52]	; (8000ee8 <__libc_init_array+0x3c>)
 8000eb2:	1b64      	subs	r4, r4, r5
 8000eb4:	10a4      	asrs	r4, r4, #2
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	42a6      	cmp	r6, r4
 8000eba:	d109      	bne.n	8000ed0 <__libc_init_array+0x24>
 8000ebc:	4d0b      	ldr	r5, [pc, #44]	; (8000eec <__libc_init_array+0x40>)
 8000ebe:	4c0c      	ldr	r4, [pc, #48]	; (8000ef0 <__libc_init_array+0x44>)
 8000ec0:	f000 f818 	bl	8000ef4 <_init>
 8000ec4:	1b64      	subs	r4, r4, r5
 8000ec6:	10a4      	asrs	r4, r4, #2
 8000ec8:	2600      	movs	r6, #0
 8000eca:	42a6      	cmp	r6, r4
 8000ecc:	d105      	bne.n	8000eda <__libc_init_array+0x2e>
 8000ece:	bd70      	pop	{r4, r5, r6, pc}
 8000ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ed4:	4798      	blx	r3
 8000ed6:	3601      	adds	r6, #1
 8000ed8:	e7ee      	b.n	8000eb8 <__libc_init_array+0xc>
 8000eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ede:	4798      	blx	r3
 8000ee0:	3601      	adds	r6, #1
 8000ee2:	e7f2      	b.n	8000eca <__libc_init_array+0x1e>
 8000ee4:	08000f1c 	.word	0x08000f1c
 8000ee8:	08000f1c 	.word	0x08000f1c
 8000eec:	08000f1c 	.word	0x08000f1c
 8000ef0:	08000f20 	.word	0x08000f20

08000ef4 <_init>:
 8000ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef6:	bf00      	nop
 8000ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efa:	bc08      	pop	{r3}
 8000efc:	469e      	mov	lr, r3
 8000efe:	4770      	bx	lr

08000f00 <_fini>:
 8000f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f02:	bf00      	nop
 8000f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f06:	bc08      	pop	{r3}
 8000f08:	469e      	mov	lr, r3
 8000f0a:	4770      	bx	lr
